<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLambdaUpdateFunctionCodeRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaUpdateFunctionCodeRequest</TokenIdentifier>
			<Abstract type="html">&lt;p/&gt;
Required parameters: [FunctionName]</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
            
			
			<NodeRef refid="1366"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setDryRun:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This boolean parameter can be used to test your request to AWS Lambda to update the Lambda function and publish a version as an atomic operation. It will do all necessary computation and validation of your code but will not upload it or a publish a version. Each time this operation is invoked, the &lt;code&gt;CodeSha256&lt;/code&gt; hash value of the provided code will also be computed and returned in the response.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *dryRun</Declaration>
			
			
			<Anchor>//api/name/dryRun</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/dryRun</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This boolean parameter can be used to test your request to AWS Lambda to update the Lambda function and publish a version as an atomic operation. It will do all necessary computation and validation of your code but will not upload it or a publish a version. Each time this operation is invoked, the &lt;code&gt;CodeSha256&lt;/code&gt; hash value of the provided code will also be computed and returned in the response.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *dryRun</Declaration>
			
			
			<Anchor>//api/name/dryRun</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/dryRun</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This boolean parameter can be used to test your request to AWS Lambda to update the Lambda function and publish a version as an atomic operation. It will do all necessary computation and validation of your code but will not upload it or a publish a version. Each time this operation is invoked, the &lt;code&gt;CodeSha256&lt;/code&gt; hash value of the provided code will also be computed and returned in the response.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *dryRun</Declaration>
			
			
			<Anchor>//api/name/dryRun</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setFunctionName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The existing Lambda function name whose code you want to replace.&lt;/p&gt;&lt;p&gt; You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The existing Lambda function name whose code you want to replace.&lt;/p&gt;&lt;p&gt; You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The existing Lambda function name whose code you want to replace.&lt;/p&gt;&lt;p&gt; You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setPublish:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *publish</Declaration>
			
			
			<Anchor>//api/name/publish</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/publish</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *publish</Declaration>
			
			
			<Anchor>//api/name/publish</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/publish</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;This boolean parameter can be used to request AWS Lambda to update the Lambda function and publish a version as an atomic operation.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *publish</Declaration>
			
			
			<Anchor>//api/name/publish</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setRevisionId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An optional value you can use to ensure you are updating the latest update of the function version or alias. If the &lt;code&gt;RevisionID&lt;/code&gt; you pass doesn&apos;t match the latest &lt;code&gt;RevisionId&lt;/code&gt; of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias &lt;code&gt;RevisionID&lt;/code&gt; using either or .&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *revisionId</Declaration>
			
			
			<Anchor>//api/name/revisionId</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/revisionId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An optional value you can use to ensure you are updating the latest update of the function version or alias. If the &lt;code&gt;RevisionID&lt;/code&gt; you pass doesn&apos;t match the latest &lt;code&gt;RevisionId&lt;/code&gt; of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias &lt;code&gt;RevisionID&lt;/code&gt; using either or .&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *revisionId</Declaration>
			
			
			<Anchor>//api/name/revisionId</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/revisionId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An optional value you can use to ensure you are updating the latest update of the function version or alias. If the &lt;code&gt;RevisionID&lt;/code&gt; you pass doesn&apos;t match the latest &lt;code&gt;RevisionId&lt;/code&gt; of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias &lt;code&gt;RevisionID&lt;/code&gt; using either or .&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *revisionId</Declaration>
			
			
			<Anchor>//api/name/revisionId</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setS3Bucket:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS Region where you are creating the Lambda function.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3Bucket</Declaration>
			
			
			<Anchor>//api/name/s3Bucket</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/s3Bucket</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS Region where you are creating the Lambda function.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3Bucket</Declaration>
			
			
			<Anchor>//api/name/s3Bucket</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/s3Bucket</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS Region where you are creating the Lambda function.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3Bucket</Declaration>
			
			
			<Anchor>//api/name/s3Bucket</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setS3Key:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon S3 object (the deployment package) key name you want to upload.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3Key</Declaration>
			
			
			<Anchor>//api/name/s3Key</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/s3Key</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon S3 object (the deployment package) key name you want to upload.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3Key</Declaration>
			
			
			<Anchor>//api/name/s3Key</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/s3Key</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon S3 object (the deployment package) key name you want to upload.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3Key</Declaration>
			
			
			<Anchor>//api/name/s3Key</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setS3ObjectVersion:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon S3 object (the deployment package) version you want to upload.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3ObjectVersion</Declaration>
			
			
			<Anchor>//api/name/s3ObjectVersion</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/s3ObjectVersion</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon S3 object (the deployment package) version you want to upload.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3ObjectVersion</Declaration>
			
			
			<Anchor>//api/name/s3ObjectVersion</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/s3ObjectVersion</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Amazon S3 object (the deployment package) version you want to upload.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *s3ObjectVersion</Declaration>
			
			
			<Anchor>//api/name/s3ObjectVersion</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/setZipFile:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see Execution Permissions. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSData *zipFile</Declaration>
			
			
			<Anchor>//api/name/zipFile</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaUpdateFunctionCodeRequest/zipFile</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see Execution Permissions. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSData *zipFile</Declaration>
			
			
			<Anchor>//api/name/zipFile</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaUpdateFunctionCodeRequest/zipFile</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The contents of your zip file containing your deployment package. If you are using the web API directly, the contents of the zip file must be base64-encoded. If you are using the AWS SDKs or the AWS CLI, the SDKs or CLI will do the encoding for you. For more information about creating a .zip file, see Execution Permissions. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSData *zipFile</Declaration>
			
			
			<Anchor>//api/name/zipFile</Anchor>
            <NodeRef refid="1366"/>
		</Token>
		
        
        
	</File>
</Tokens>