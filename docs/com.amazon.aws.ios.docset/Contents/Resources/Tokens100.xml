<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSAutoScalingPutLifecycleHookType.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSAutoScalingPutLifecycleHookType</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
            
			
			<NodeRef refid="100"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setAutoScalingGroupName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the Auto Scaling group.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *autoScalingGroupName</Declaration>
			
			
			<Anchor>//api/name/autoScalingGroupName</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/autoScalingGroupName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the Auto Scaling group.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *autoScalingGroupName</Declaration>
			
			
			<Anchor>//api/name/autoScalingGroupName</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/autoScalingGroupName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the Auto Scaling group.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *autoScalingGroupName</Declaration>
			
			
			<Anchor>//api/name/autoScalingGroupName</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setDefaultResult:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *defaultResult</Declaration>
			
			
			<Anchor>//api/name/defaultResult</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/defaultResult</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *defaultResult</Declaration>
			
			
			<Anchor>//api/name/defaultResult</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/defaultResult</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either &lt;code&gt;CONTINUE&lt;/code&gt; or &lt;code&gt;ABANDON&lt;/code&gt;. The default value is &lt;code&gt;ABANDON&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *defaultResult</Declaration>
			
			
			<Anchor>//api/name/defaultResult</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setHeartbeatTimeout:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default is 3600 seconds (1 hour).&lt;/p&gt;&lt;p&gt;If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *heartbeatTimeout</Declaration>
			
			
			<Anchor>//api/name/heartbeatTimeout</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/heartbeatTimeout</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default is 3600 seconds (1 hour).&lt;/p&gt;&lt;p&gt;If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *heartbeatTimeout</Declaration>
			
			
			<Anchor>//api/name/heartbeatTimeout</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/heartbeatTimeout</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default is 3600 seconds (1 hour).&lt;/p&gt;&lt;p&gt;If the lifecycle hook times out, Amazon EC2 Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling &lt;a&gt;RecordLifecycleActionHeartbeat&lt;/a&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *heartbeatTimeout</Declaration>
			
			
			<Anchor>//api/name/heartbeatTimeout</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setLifecycleHookName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the lifecycle hook.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *lifecycleHookName</Declaration>
			
			
			<Anchor>//api/name/lifecycleHookName</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/lifecycleHookName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the lifecycle hook.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *lifecycleHookName</Declaration>
			
			
			<Anchor>//api/name/lifecycleHookName</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/lifecycleHookName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The name of the lifecycle hook.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *lifecycleHookName</Declaration>
			
			
			<Anchor>//api/name/lifecycleHookName</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setLifecycleTransition:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The instance state to which you want to attach the lifecycle hook. The possible values are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;autoscaling:EC2INSTANCELAUNCHING&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;autoscaling:EC2INSTANCETERMINATING&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This parameter is required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *lifecycleTransition</Declaration>
			
			
			<Anchor>//api/name/lifecycleTransition</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/lifecycleTransition</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The instance state to which you want to attach the lifecycle hook. The possible values are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;autoscaling:EC2INSTANCELAUNCHING&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;autoscaling:EC2INSTANCETERMINATING&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This parameter is required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *lifecycleTransition</Declaration>
			
			
			<Anchor>//api/name/lifecycleTransition</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/lifecycleTransition</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The instance state to which you want to attach the lifecycle hook. The possible values are:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;autoscaling:EC2INSTANCELAUNCHING&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;autoscaling:EC2INSTANCETERMINATING&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;This parameter is required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *lifecycleTransition</Declaration>
			
			
			<Anchor>//api/name/lifecycleTransition</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setNotificationMetadata:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Contains additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *notificationMetadata</Declaration>
			
			
			<Anchor>//api/name/notificationMetadata</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/notificationMetadata</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Contains additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *notificationMetadata</Declaration>
			
			
			<Anchor>//api/name/notificationMetadata</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/notificationMetadata</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Contains additional information that you want to include any time Amazon EC2 Auto Scaling sends a message to the notification target.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *notificationMetadata</Declaration>
			
			
			<Anchor>//api/name/notificationMetadata</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setNotificationTargetARN:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the notification target that Amazon EC2 Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN.&lt;/p&gt;&lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key/value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt;&lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contains the following additional key/value pair: &lt;code&gt;&quot;Event&quot;: &quot;autoscaling:TEST_NOTIFICATION&quot;&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *notificationTargetARN</Declaration>
			
			
			<Anchor>//api/name/notificationTargetARN</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/notificationTargetARN</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the notification target that Amazon EC2 Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN.&lt;/p&gt;&lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key/value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt;&lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contains the following additional key/value pair: &lt;code&gt;&quot;Event&quot;: &quot;autoscaling:TEST_NOTIFICATION&quot;&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *notificationTargetARN</Declaration>
			
			
			<Anchor>//api/name/notificationTargetARN</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/notificationTargetARN</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the notification target that Amazon EC2 Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN.&lt;/p&gt;&lt;p&gt;This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key/value pair format when sending notifications to an Amazon SNS topic.&lt;/p&gt;&lt;p&gt;When you specify a notification target, Amazon EC2 Auto Scaling sends it a test message. Test messages contains the following additional key/value pair: &lt;code&gt;&quot;Event&quot;: &quot;autoscaling:TEST_NOTIFICATION&quot;&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *notificationTargetARN</Declaration>
			
			
			<Anchor>//api/name/notificationTargetARN</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/setRoleARN:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt;&lt;p&gt;This parameter is required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *roleARN</Declaration>
			
			
			<Anchor>//api/name/roleARN</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSAutoScalingPutLifecycleHookType/roleARN</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt;&lt;p&gt;This parameter is required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *roleARN</Declaration>
			
			
			<Anchor>//api/name/roleARN</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSAutoScalingPutLifecycleHookType/roleARN</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.&lt;/p&gt;&lt;p&gt;This parameter is required for new lifecycle hooks, but optional when updating existing hooks.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSAutoScalingModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *roleARN</Declaration>
			
			
			<Anchor>//api/name/roleARN</Anchor>
            <NodeRef refid="100"/>
		</Token>
		
        
        
	</File>
</Tokens>