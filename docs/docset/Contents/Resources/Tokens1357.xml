<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSLambdaPublishVersionRequest.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSLambdaPublishVersionRequest</TokenIdentifier>
			<Abstract type="html">&lt;p/&gt;
Required parameters: [FunctionName]</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
            
			
			<NodeRef refid="1357"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/setCodeSha256:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter, the value must match the SHA256 of the $LATEST version for the publication to succeed. You can use the &lt;b&gt;DryRun&lt;/b&gt; parameter of &lt;a&gt;UpdateFunctionCode&lt;/a&gt; to verify the hash value that will be returned before publishing your new version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *codeSha256</Declaration>
			
			
			<Anchor>//api/name/codeSha256</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/codeSha256</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter, the value must match the SHA256 of the $LATEST version for the publication to succeed. You can use the &lt;b&gt;DryRun&lt;/b&gt; parameter of &lt;a&gt;UpdateFunctionCode&lt;/a&gt; to verify the hash value that will be returned before publishing your new version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *codeSha256</Declaration>
			
			
			<Anchor>//api/name/codeSha256</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaPublishVersionRequest/codeSha256</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The SHA256 hash of the deployment package you want to publish. This provides validation on the code you are publishing. If you provide this parameter, the value must match the SHA256 of the $LATEST version for the publication to succeed. You can use the &lt;b&gt;DryRun&lt;/b&gt; parameter of &lt;a&gt;UpdateFunctionCode&lt;/a&gt; to verify the hash value that will be returned before publishing your new version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *codeSha256</Declaration>
			
			
			<Anchor>//api/name/codeSha256</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/setDetail:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *detail</Declaration>
			
			
			<Anchor>//api/name/detail</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/detail</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *detail</Declaration>
			
			
			<Anchor>//api/name/detail</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaPublishVersionRequest/detail</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The description for the version you are publishing. If not provided, AWS Lambda copies the description from the $LATEST version.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *detail</Declaration>
			
			
			<Anchor>//api/name/detail</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/setFunctionName:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Lambda function name. You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Lambda function name. You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaPublishVersionRequest/functionName</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Lambda function name. You can specify a function name (for example, &lt;code&gt;Thumbnail&lt;/code&gt;) or you can specify Amazon Resource Name (ARN) of the function (for example, &lt;code&gt;arn:aws:lambda:us-west-2:account-id:function:ThumbNail&lt;/code&gt;). AWS Lambda also allows you to specify a partial ARN (for example, &lt;code&gt;account-id:Thumbnail&lt;/code&gt;). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 characters in length. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *functionName</Declaration>
			
			
			<Anchor>//api/name/functionName</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/setRevisionId:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An optional value you can use to ensure you are updating the latest update of the function version or alias. If the &lt;code&gt;RevisionID&lt;/code&gt; you pass doesn&apos;t match the latest &lt;code&gt;RevisionId&lt;/code&gt; of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias &lt;code&gt;RevisionID&lt;/code&gt; using either or .&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *revisionId</Declaration>
			
			
			<Anchor>//api/name/revisionId</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSLambdaPublishVersionRequest/revisionId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An optional value you can use to ensure you are updating the latest update of the function version or alias. If the &lt;code&gt;RevisionID&lt;/code&gt; you pass doesn&apos;t match the latest &lt;code&gt;RevisionId&lt;/code&gt; of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias &lt;code&gt;RevisionID&lt;/code&gt; using either or .&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *revisionId</Declaration>
			
			
			<Anchor>//api/name/revisionId</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSLambdaPublishVersionRequest/revisionId</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;An optional value you can use to ensure you are updating the latest update of the function version or alias. If the &lt;code&gt;RevisionID&lt;/code&gt; you pass doesn&apos;t match the latest &lt;code&gt;RevisionId&lt;/code&gt; of the function or alias, it will fail with an error message, advising you to retrieve the latest function version or alias &lt;code&gt;RevisionID&lt;/code&gt; using either or .&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSLambdaModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *revisionId</Declaration>
			
			
			<Anchor>//api/name/revisionId</Anchor>
            <NodeRef refid="1357"/>
		</Token>
		
        
        
	</File>
</Tokens>