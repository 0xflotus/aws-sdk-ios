<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSSNSSubscribeInput.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSSNSSubscribeInput</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Input for Subscribe action.&lt;/p&gt;
Required parameters: [TopicArn, Protocol]</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
            
			
			<NodeRef refid="2250"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/setAttributes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Assigns attributes to the subscription as a map of key-value pairs. You can assign any attribute that is supported by the &lt;code&gt;SetSubscriptionAttributes&lt;/code&gt; action.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *attributes</Declaration>
			
			
			<Anchor>//api/name/attributes</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/attributes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Assigns attributes to the subscription as a map of key-value pairs. You can assign any attribute that is supported by the &lt;code&gt;SetSubscriptionAttributes&lt;/code&gt; action.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *attributes</Declaration>
			
			
			<Anchor>//api/name/attributes</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSSNSSubscribeInput/attributes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Assigns attributes to the subscription as a map of key-value pairs. You can assign any attribute that is supported by the &lt;code&gt;SetSubscriptionAttributes&lt;/code&gt; action.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDictionary&lt;NSString*NSString*&gt; *attributes</Declaration>
			
			
			<Anchor>//api/name/attributes</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/setEndpoint:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the endpoint is an URL beginning with &quot;http://&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the endpoint is a URL beginning with &quot;https://&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an AWS Lambda function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *endpoint</Declaration>
			
			
			<Anchor>//api/name/endpoint</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/endpoint</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the endpoint is an URL beginning with &quot;http://&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the endpoint is a URL beginning with &quot;https://&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an AWS Lambda function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *endpoint</Declaration>
			
			
			<Anchor>//api/name/endpoint</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSSNSSubscribeInput/endpoint</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The endpoint that you want to receive notifications. Endpoints vary by protocol:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;http&lt;/code&gt; protocol, the endpoint is an URL beginning with &quot;http://&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;https&lt;/code&gt; protocol, the endpoint is a URL beginning with &quot;https://&quot;&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;email&lt;/code&gt; protocol, the endpoint is an email address&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;email-json&lt;/code&gt; protocol, the endpoint is an email address&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;sms&lt;/code&gt; protocol, the endpoint is a phone number of an SMS-enabled device&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;sqs&lt;/code&gt; protocol, the endpoint is the ARN of an Amazon SQS queue&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;application&lt;/code&gt; protocol, the endpoint is the EndpointArn of a mobile app and device.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;For the &lt;code&gt;lambda&lt;/code&gt; protocol, the endpoint is the ARN of an AWS Lambda function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *endpoint</Declaration>
			
			
			<Anchor>//api/name/endpoint</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/setProtocols:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The protocol you want to use. Supported protocols include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;http&lt;/code&gt; -- delivery of JSON-encoded message via HTTP POST&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;https&lt;/code&gt; -- delivery of JSON-encoded message via HTTPS POST&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;email&lt;/code&gt; -- delivery of message via SMTP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;email-json&lt;/code&gt; -- delivery of JSON-encoded message via SMTP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;sms&lt;/code&gt; -- delivery of message via SMS&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;sqs&lt;/code&gt; -- delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;application&lt;/code&gt; -- delivery of JSON-encoded message to an EndpointArn for a mobile app and device.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt; -- delivery of JSON-encoded message to an AWS Lambda function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *protocols</Declaration>
			
			
			<Anchor>//api/name/protocols</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/protocols</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The protocol you want to use. Supported protocols include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;http&lt;/code&gt; -- delivery of JSON-encoded message via HTTP POST&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;https&lt;/code&gt; -- delivery of JSON-encoded message via HTTPS POST&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;email&lt;/code&gt; -- delivery of message via SMTP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;email-json&lt;/code&gt; -- delivery of JSON-encoded message via SMTP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;sms&lt;/code&gt; -- delivery of message via SMS&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;sqs&lt;/code&gt; -- delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;application&lt;/code&gt; -- delivery of JSON-encoded message to an EndpointArn for a mobile app and device.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt; -- delivery of JSON-encoded message to an AWS Lambda function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *protocols</Declaration>
			
			
			<Anchor>//api/name/protocols</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSSNSSubscribeInput/protocols</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The protocol you want to use. Supported protocols include:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;http&lt;/code&gt; -- delivery of JSON-encoded message via HTTP POST&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;https&lt;/code&gt; -- delivery of JSON-encoded message via HTTPS POST&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;email&lt;/code&gt; -- delivery of message via SMTP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;email-json&lt;/code&gt; -- delivery of JSON-encoded message via SMTP&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;sms&lt;/code&gt; -- delivery of message via SMS&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;sqs&lt;/code&gt; -- delivery of JSON-encoded message to an Amazon SQS queue&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;application&lt;/code&gt; -- delivery of JSON-encoded message to an EndpointArn for a mobile app and device.&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;&lt;code&gt;lambda&lt;/code&gt; -- delivery of JSON-encoded message to an AWS Lambda function.&lt;/p&gt;&lt;/li&gt;&lt;/ul&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *protocols</Declaration>
			
			
			<Anchor>//api/name/protocols</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/setReturnSubscriptionArn:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt;&lt;p&gt;If you set this parameter to &lt;code&gt;false&lt;/code&gt;, the response includes the ARN for confirmed subscriptions, but it includes an ARN value of &quot;pending subscription&quot; for subscriptions that are not yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt;&lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed.&lt;/p&gt;&lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *returnSubscriptionArn</Declaration>
			
			
			<Anchor>//api/name/returnSubscriptionArn</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/returnSubscriptionArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt;&lt;p&gt;If you set this parameter to &lt;code&gt;false&lt;/code&gt;, the response includes the ARN for confirmed subscriptions, but it includes an ARN value of &quot;pending subscription&quot; for subscriptions that are not yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt;&lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed.&lt;/p&gt;&lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *returnSubscriptionArn</Declaration>
			
			
			<Anchor>//api/name/returnSubscriptionArn</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSSNSSubscribeInput/returnSubscriptionArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Sets whether the response from the &lt;code&gt;Subscribe&lt;/code&gt; request includes the subscription ARN, even if the subscription is not yet confirmed.&lt;/p&gt;&lt;p&gt;If you set this parameter to &lt;code&gt;false&lt;/code&gt;, the response includes the ARN for confirmed subscriptions, but it includes an ARN value of &quot;pending subscription&quot; for subscriptions that are not yet confirmed. A subscription becomes confirmed when the subscriber calls the &lt;code&gt;ConfirmSubscription&lt;/code&gt; action with a confirmation token.&lt;/p&gt;&lt;p&gt;If you set this parameter to &lt;code&gt;true&lt;/code&gt;, the response includes the ARN in all cases, even if the subscription is not yet confirmed.&lt;/p&gt;&lt;p&gt;The default value is &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *returnSubscriptionArn</Declaration>
			
			
			<Anchor>//api/name/returnSubscriptionArn</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/setTopicArn:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the topic you want to subscribe to.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *topicArn</Declaration>
			
			
			<Anchor>//api/name/topicArn</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSSNSSubscribeInput/topicArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the topic you want to subscribe to.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *topicArn</Declaration>
			
			
			<Anchor>//api/name/topicArn</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSSNSSubscribeInput/topicArn</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The ARN of the topic you want to subscribe to.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSSNSModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *topicArn</Declaration>
			
			
			<Anchor>//api/name/topicArn</Anchor>
            <NodeRef refid="2250"/>
		</Token>
		
        
        
	</File>
</Tokens>