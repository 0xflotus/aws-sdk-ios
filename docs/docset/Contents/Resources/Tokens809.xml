<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSFirehoseParquetSerDe.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSFirehoseParquetSerDe</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
            
			
			<NodeRef refid="809"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/setBlockSizeBytes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *blockSizeBytes</Declaration>
			
			
			<Anchor>//api/name/blockSizeBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/blockSizeBytes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *blockSizeBytes</Declaration>
			
			
			<Anchor>//api/name/blockSizeBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSFirehoseParquetSerDe/blockSizeBytes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *blockSizeBytes</Declaration>
			
			
			<Anchor>//api/name/blockSizeBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/setCompression:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The compression code to use over data blocks. The possible values are &lt;code&gt;UNCOMPRESSED&lt;/code&gt;, &lt;code&gt;SNAPPY&lt;/code&gt;, and &lt;code&gt;GZIP&lt;/code&gt;, with the default being &lt;code&gt;SNAPPY&lt;/code&gt;. Use &lt;code&gt;SNAPPY&lt;/code&gt; for higher decompression speed. Use &lt;code&gt;GZIP&lt;/code&gt; if the compression ration is more important than speed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSFirehoseParquetCompression compression</Declaration>
			
			
			<Anchor>//api/name/compression</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/compression</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The compression code to use over data blocks. The possible values are &lt;code&gt;UNCOMPRESSED&lt;/code&gt;, &lt;code&gt;SNAPPY&lt;/code&gt;, and &lt;code&gt;GZIP&lt;/code&gt;, with the default being &lt;code&gt;SNAPPY&lt;/code&gt;. Use &lt;code&gt;SNAPPY&lt;/code&gt; for higher decompression speed. Use &lt;code&gt;GZIP&lt;/code&gt; if the compression ration is more important than speed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSFirehoseParquetCompression compression</Declaration>
			
			
			<Anchor>//api/name/compression</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSFirehoseParquetSerDe/compression</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The compression code to use over data blocks. The possible values are &lt;code&gt;UNCOMPRESSED&lt;/code&gt;, &lt;code&gt;SNAPPY&lt;/code&gt;, and &lt;code&gt;GZIP&lt;/code&gt;, with the default being &lt;code&gt;SNAPPY&lt;/code&gt;. Use &lt;code&gt;SNAPPY&lt;/code&gt; for higher decompression speed. Use &lt;code&gt;GZIP&lt;/code&gt; if the compression ration is more important than speed.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSFirehoseParquetCompression compression</Declaration>
			
			
			<Anchor>//api/name/compression</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/setEnableDictionaryCompression:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates whether to enable dictionary compression.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *enableDictionaryCompression</Declaration>
			
			
			<Anchor>//api/name/enableDictionaryCompression</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/enableDictionaryCompression</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates whether to enable dictionary compression.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *enableDictionaryCompression</Declaration>
			
			
			<Anchor>//api/name/enableDictionaryCompression</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSFirehoseParquetSerDe/enableDictionaryCompression</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates whether to enable dictionary compression.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *enableDictionaryCompression</Declaration>
			
			
			<Anchor>//api/name/enableDictionaryCompression</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/setMaxPaddingBytes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxPaddingBytes</Declaration>
			
			
			<Anchor>//api/name/maxPaddingBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/maxPaddingBytes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxPaddingBytes</Declaration>
			
			
			<Anchor>//api/name/maxPaddingBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSFirehoseParquetSerDe/maxPaddingBytes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxPaddingBytes</Declaration>
			
			
			<Anchor>//api/name/maxPaddingBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/setPageSizeBytes:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *pageSizeBytes</Declaration>
			
			
			<Anchor>//api/name/pageSizeBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/pageSizeBytes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *pageSizeBytes</Declaration>
			
			
			<Anchor>//api/name/pageSizeBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSFirehoseParquetSerDe/pageSizeBytes</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *pageSizeBytes</Declaration>
			
			
			<Anchor>//api/name/pageSizeBytes</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/setWriterVersion:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates the version of row format to output. The possible values are &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt;. The default is &lt;code&gt;V1&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSFirehoseParquetWriterVersion writerVersion</Declaration>
			
			
			<Anchor>//api/name/writerVersion</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSFirehoseParquetSerDe/writerVersion</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates the version of row format to output. The possible values are &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt;. The default is &lt;code&gt;V1&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSFirehoseParquetWriterVersion writerVersion</Declaration>
			
			
			<Anchor>//api/name/writerVersion</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSFirehoseParquetSerDe/writerVersion</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Indicates the version of row format to output. The possible values are &lt;code&gt;V1&lt;/code&gt; and &lt;code&gt;V2&lt;/code&gt;. The default is &lt;code&gt;V1&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSFirehoseModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSFirehoseParquetWriterVersion writerVersion</Declaration>
			
			
			<Anchor>//api/name/writerVersion</Anchor>
            <NodeRef refid="809"/>
		</Token>
		
        
        
	</File>
</Tokens>