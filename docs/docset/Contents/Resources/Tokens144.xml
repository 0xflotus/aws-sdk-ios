<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/AWSCloudWatchGetMetricDataInput.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/AWSCloudWatchGetMetricDataInput</TokenIdentifier>
			<Abstract type="html"></Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
            
			
			<NodeRef refid="144"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/setEndTime:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt;&lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&apos;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch then setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *endTime</Declaration>
			
			
			<Anchor>//api/name/endTime</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/endTime</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt;&lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&apos;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch then setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *endTime</Declaration>
			
			
			<Anchor>//api/name/endTime</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatchGetMetricDataInput/endTime</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The time stamp indicating the latest data to be returned.&lt;/p&gt;&lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&apos;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;EndTime&lt;/code&gt; can get a faster response from CloudWatch then setting 12:07 or 12:29 as the &lt;code&gt;EndTime&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *endTime</Declaration>
			
			
			<Anchor>//api/name/endTime</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/setMaxDatapoints:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxDatapoints</Declaration>
			
			
			<Anchor>//api/name/maxDatapoints</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/maxDatapoints</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxDatapoints</Declaration>
			
			
			<Anchor>//api/name/maxDatapoints</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatchGetMetricDataInput/maxDatapoints</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The maximum number of data points the request should return before paginating. If you omit this, the default of 100,800 is used.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSNumber *maxDatapoints</Declaration>
			
			
			<Anchor>//api/name/maxDatapoints</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/setMetricDataQueries:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 100 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCloudWatchMetricDataQuery*&gt; *metricDataQueries</Declaration>
			
			
			<Anchor>//api/name/metricDataQueries</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/metricDataQueries</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 100 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCloudWatchMetricDataQuery*&gt; *metricDataQueries</Declaration>
			
			
			<Anchor>//api/name/metricDataQueries</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatchGetMetricDataInput/metricDataQueries</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The metric queries to be returned. A single &lt;code&gt;GetMetricData&lt;/code&gt; call can include as many as 100 &lt;code&gt;MetricDataQuery&lt;/code&gt; structures. Each of these structures can specify either a metric to retrieve, or a math expression to perform on retrieved data. &lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSArray&lt;AWSCloudWatchMetricDataQuery*&gt; *metricDataQueries</Declaration>
			
			
			<Anchor>//api/name/metricDataQueries</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/setNextToken:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Include this value, if it was returned by the previous call, to get the next set of data points.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/nextToken</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Include this value, if it was returned by the previous call, to get the next set of data points.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatchGetMetricDataInput/nextToken</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;Include this value, if it was returned by the previous call, to get the next set of data points.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSString *nextToken</Declaration>
			
			
			<Anchor>//api/name/nextToken</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/setScanBy:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSCloudWatchScanBy scanBy</Declaration>
			
			
			<Anchor>//api/name/scanBy</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/scanBy</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSCloudWatchScanBy scanBy</Declaration>
			
			
			<Anchor>//api/name/scanBy</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatchGetMetricDataInput/scanBy</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The order in which data points should be returned. &lt;code&gt;TimestampDescending&lt;/code&gt; returns the newest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached. &lt;code&gt;TimestampAscending&lt;/code&gt; returns the oldest data first and paginates when the &lt;code&gt;MaxDatapoints&lt;/code&gt; limit is reached.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, assign) AWSCloudWatchScanBy scanBy</Declaration>
			
			
			<Anchor>//api/name/scanBy</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/setStartTime:</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt;&lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&apos;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch then setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *startTime</Declaration>
			
			
			<Anchor>//api/name/startTime</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/AWSCloudWatchGetMetricDataInput/startTime</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt;&lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&apos;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch then setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *startTime</Declaration>
			
			
			<Anchor>//api/name/startTime</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instp/AWSCloudWatchGetMetricDataInput/startTime</TokenIdentifier>
			<Abstract type="html">&lt;p&gt;The time stamp indicating the earliest data to be returned.&lt;/p&gt;&lt;p&gt;For better performance, specify &lt;code&gt;StartTime&lt;/code&gt; and &lt;code&gt;EndTime&lt;/code&gt; values that align with the value of the metric&apos;s &lt;code&gt;Period&lt;/code&gt; and sync up with the beginning and end of an hour. For example, if the &lt;code&gt;Period&lt;/code&gt; of a metric is 5 minutes, specifying 12:05 or 12:30 as &lt;code&gt;StartTime&lt;/code&gt; can get a faster response from CloudWatch then setting 12:07 or 12:29 as the &lt;code&gt;StartTime&lt;/code&gt;.&lt;/p&gt;</Abstract>
			<DeclaredIn>AWSCloudWatchModel.h</DeclaredIn>
			
			<Declaration>@property (nonatomic, strong) NSDate *startTime</Declaration>
			
			
			<Anchor>//api/name/startTime</Anchor>
            <NodeRef refid="144"/>
		</Token>
		
        
        
	</File>
</Tokens>